(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';if('undefined'==typeof AFRAME)throw new Error('Component attempted to register before AFRAME was available.');require('./systems/super-hands-system.js'),require('./reaction_components/hoverable.js'),require('./reaction_components/grabbable.js'),require('./reaction_components/stretchable.js'),require('./reaction_components/drag-droppable.js'),require('./reaction_components/clickable.js'),require('./misc_components/locomotor-auto-config.js'),require('./misc_components/progressive-controls.js'),require('./primitives/a-locomotor.js'),AFRAME.registerComponent('super-hands',{schema:{colliderState:{default:'collided'},colliderEvent:{default:'hit'},colliderEventProperty:{default:'el'},colliderEndEvent:{default:''},colliderEndEventProperty:{default:''},grabStartButtons:{default:['gripdown','trackpaddown','triggerdown','gripclose','pointup','thumbup','pointingstart','pistolstart','thumbstickdown','mousedown','touchstart']},grabEndButtons:{default:['gripup','trackpadup','triggerup','gripopen','pointdown','thumbdown','pointingend','pistolend','thumbstickup','mouseup','touchend']},stretchStartButtons:{default:['gripdown','trackpaddown','triggerdown','gripclose','pointup','thumbup','pointingstart','pistolstart','thumbstickdown','mousedown','touchstart']},stretchEndButtons:{default:['gripup','trackpadup','triggerup','gripopen','pointdown','thumbdown','pointingend','pistolend','thumbstickup','mouseup','touchend']},dragDropStartButtons:{default:['gripdown','trackpaddown','triggerdown','gripclose','pointup','thumbup','pointingstart','pistolstart','thumbstickdown','mousedown','touchstart']},dragDropEndButtons:{default:['gripup','trackpadup','triggerup','gripopen','pointdown','thumbdown','pointingend','pistolend','thumbstickup','mouseup','touchend']}},multiple:!1,init:function(){this.HOVER_EVENT='hover-start',this.UNHOVER_EVENT='hover-end',this.GRAB_EVENT='grab-start',this.UNGRAB_EVENT='grab-end',this.STRETCH_EVENT='stretch-start',this.UNSTRETCH_EVENT='stretch-end',this.DRAG_EVENT='drag-start',this.UNDRAG_EVENT='drag-end',this.DRAGOVER_EVENT='dragover-start',this.UNDRAGOVER_EVENT='dragover-end',this.DRAGDROP_EVENT='drag-drop',this.otherSuperHand=null,this.gehDragged=new Set,this.gehClicking=new Set,this.hoverEls=[],this.state=new Map,this.dragging=!1,this.unHover=this.unHover.bind(this),this.unWatch=this.unWatch.bind(this),this.onHit=this.onHit.bind(this),this.onGrabStartButton=this.onGrabStartButton.bind(this),this.onGrabEndButton=this.onGrabEndButton.bind(this),this.onStretchStartButton=this.onStretchStartButton.bind(this),this.onStretchEndButton=this.onStretchEndButton.bind(this),this.onDragDropStartButton=this.onDragDropStartButton.bind(this),this.onDragDropEndButton=this.onDragDropEndButton.bind(this),this.system.registerMe(this)},update:function(a){this.unRegisterListeners(a),this.registerListeners()},remove:function(){this.system.unregisterMe(this),this.unRegisterListeners(),this.hoverEls.forEach((a)=>{a.removeEventListener('stateremoved',this.unWatch)}),this.hoverEls.length=0,this.state.get(this.HOVER_EVENT)&&this._unHover(this.state.get(this.HOVER_EVENT)),this.onGrabEndButton(),this.onStretchEndButton(),this.onDragDropEndButton()},pause:function(){},play:function(){},onGrabStartButton:function(a){let b=this.state.get(this.GRAB_EVENT);this.dispatchMouseEventAll('mousedown',this.el),this.gehClicking=new Set(this.hoverEls),b||(b=this.findTarget(this.GRAB_EVENT,{hand:this.el,buttonEvent:a}),b&&(this.state.set(this.GRAB_EVENT,b),this._unHover(b)))},onGrabEndButton:function(a){const b=this.hoverEls.filter((a)=>this.gehClicking.has(a)),c=this.state.get(this.GRAB_EVENT),d={hand:this.el,buttonEvent:a};this.dispatchMouseEventAll('mouseup',this.el);for(let c=0;c<b.length;c++)this.dispatchMouseEvent(b[c],'click',this.el);this.gehClicking.clear(),c&&!this.emitCancelable(c,this.UNGRAB_EVENT,d)&&(this.promoteHoveredEl(this.state.get(this.GRAB_EVENT)),this.state.delete(this.GRAB_EVENT),this.hover())},onStretchStartButton:function(a){let b=this.state.get(this.STRETCH_EVENT);b||(b=this.findTarget(this.STRETCH_EVENT,{hand:this.el,buttonEvent:a}),b&&(this.state.set(this.STRETCH_EVENT,b),this._unHover(b)))},onStretchEndButton:function(a){const b=this.state.get(this.STRETCH_EVENT),c={hand:this.el,buttonEvent:a};b&&!this.emitCancelable(b,this.UNSTRETCH_EVENT,c)&&(this.promoteHoveredEl(b),this.state.delete(this.STRETCH_EVENT),this.hover())},onDragDropStartButton:function(a){let b=this.state.get(this.DRAG_EVENT);this.dragging=!0,this.hoverEls.length&&(this.gehDragged=new Set(this.hoverEls),this.dispatchMouseEventAll('dragstart',this.el)),b||(b=this.state.get(this.GRAB_EVENT)&&!this.emitCancelable(this.state.get(this.GRAB_EVENT),this.DRAG_EVENT,{hand:this.el,buttonEvent:a})?this.state.get(this.GRAB_EVENT):this.findTarget(this.DRAG_EVENT,{hand:this.el,buttonEvent:a}),b&&(this.state.set(this.DRAG_EVENT,b),this._unHover(b)))},onDragDropEndButton:function(a){const b=this.state.get(this.DRAG_EVENT);if(this.dragging=!1,this.gehDragged.forEach((a)=>{this.dispatchMouseEvent(a,'dragend',this.el),this.dispatchMouseEventAll('drop',a,!0,!0),this.dispatchMouseEventAll('dragleave',a,!0,!0)}),this.gehDragged.clear(),b){const c={hand:this.el,dropped:b,on:null,buttonEvent:a},d={hand:this.el,buttonEvent:a},e=this.findTarget(this.DRAGDROP_EVENT,c,!0);e&&(c.on=e,this.emitCancelable(b,this.DRAGDROP_EVENT,c),this._unHover(e)),this.emitCancelable(b,this.UNDRAG_EVENT,d)||(this.promoteHoveredEl(b),this.state.delete(this.DRAG_EVENT),this.hover())}},onHit:function(a){const b=a.detail[this.data.colliderEventProperty];var c=(a)=>{let b;b=this.hoverEls.indexOf(a),-1===b&&(this.hoverEls.push(a),a.addEventListener('stateremoved',this.unWatch),this.dispatchMouseEvent(a,'mouseover',this.el),this.dragging&&this.gehDragged.size&&this.gehDragged.forEach((a)=>{this.dispatchMouseEventAll('dragenter',a,!0,!0)}),this.hover())};b&&(Array.isArray(b)?b.forEach(c):c(b))},hover:function(){var a,b;this.state.has(this.HOVER_EVENT)&&this._unHover(this.state.get(this.HOVER_EVENT),!0),this.state.has(this.DRAGOVER_EVENT)&&this._unHover(this.state.get(this.DRAGOVER_EVENT),!0),this.dragging&&this.state.get(this.DRAG_EVENT)&&(a={hand:this.el,hovered:b,carried:this.state.get(this.DRAG_EVENT)},b=this.findTarget(this.DRAGOVER_EVENT,a,!0),b&&(b.addEventListener('stateremoved',this.unHover),this.emitCancelable(this.state.get(this.DRAG_EVENT),this.DRAGOVER_EVENT,a),this.state.set(this.DRAGOVER_EVENT,b))),this.state.has(this.DRAGOVER_EVENT)||(b=this.findTarget(this.HOVER_EVENT,{hand:this.el},!0),b&&(b.addEventListener('stateremoved',this.unHover),this.state.set(this.HOVER_EVENT,b)))},unHover:function(a){const b=a.detail[this.data.colliderEndEventProperty];b?Array.isArray(b)?b.forEach((a)=>this._unHover(a)):this._unHover(b):a.detail.state===this.data.colliderState&&this._unHover(a.target)},_unHover:function(a,b){let c,d=!1;a.removeEventListener('stateremoved',this.unHover),a===this.state.get(this.DRAGOVER_EVENT)&&(this.state.delete(this.DRAGOVER_EVENT),d=!0,c={hand:this.el,hovered:a,carried:this.state.get(this.DRAG_EVENT)},this.emitCancelable(a,this.UNDRAGOVER_EVENT,c),this.state.has(this.DRAG_EVENT)&&this.emitCancelable(this.state.get(this.DRAG_EVENT),this.UNDRAGOVER_EVENT,c)),a===this.state.get(this.HOVER_EVENT)&&(this.state.delete(this.HOVER_EVENT),d=!0,this.emitCancelable(a,this.UNHOVER_EVENT,{hand:this.el})),d&&!b&&this.hover()},unWatch:function(a){const b=a.detail[this.data.colliderEndEventProperty];b?Array.isArray(b)?b.forEach((a)=>this._unWatch(a)):this._unWatch(b):a.detail.state===this.data.colliderState&&this._unWatch(a.target)},_unWatch:function(a){var b=this.hoverEls.indexOf(a);a.removeEventListener('stateremoved',this.unWatch),-1!==b&&this.hoverEls.splice(b,1),this.gehDragged.forEach((b)=>{this.dispatchMouseEvent(a,'dragleave',b),this.dispatchMouseEvent(b,'dragleave',a)}),this.dispatchMouseEvent(a,'mouseout',this.el)},registerListeners:function(){this.el.addEventListener(this.data.colliderEvent,this.onHit),this.el.addEventListener(this.data.colliderEndEvent,this.unWatch),this.el.addEventListener(this.data.colliderEndEvent,this.unHover),this.data.grabStartButtons.forEach((a)=>{this.el.addEventListener(a,this.onGrabStartButton)}),this.data.grabEndButtons.forEach((a)=>{this.el.addEventListener(a,this.onGrabEndButton)}),this.data.stretchStartButtons.forEach((a)=>{this.el.addEventListener(a,this.onStretchStartButton)}),this.data.stretchEndButtons.forEach((a)=>{this.el.addEventListener(a,this.onStretchEndButton)}),this.data.dragDropStartButtons.forEach((a)=>{this.el.addEventListener(a,this.onDragDropStartButton)}),this.data.dragDropEndButtons.forEach((a)=>{this.el.addEventListener(a,this.onDragDropEndButton)})},unRegisterListeners:function(a){a=a||this.data;0===Object.keys(a).length||(this.el.removeEventListener(a.colliderEvent,this.onHit),this.el.removeEventListener(a.colliderEndEvent,this.unHover),this.el.removeEventListener(a.colliderEndEvent,this.unWatch),a.grabStartButtons.forEach((a)=>{this.el.removeEventListener(a,this.onGrabStartButton)}),a.grabEndButtons.forEach((a)=>{this.el.removeEventListener(a,this.onGrabEndButton)}),a.stretchStartButtons.forEach((a)=>{this.el.removeEventListener(a,this.onStretchStartButton)}),a.stretchEndButtons.forEach((a)=>{this.el.removeEventListener(a,this.onStretchEndButton)}),a.dragDropStartButtons.forEach((a)=>{this.el.removeEventListener(a,this.onDragDropStartButton)}),a.dragDropEndButtons.forEach((a)=>{this.el.removeEventListener(a,this.onDragDropEndButton)}))},emitCancelable:function(a,b,c){var d,e;return c=c||{},d={bubbles:!0,cancelable:!0,detail:c},d.detail.target=d.detail.target||a,e=new window.CustomEvent(b,d),a.dispatchEvent(e)},dispatchMouseEvent:function(a,b,c){var d=new window.MouseEvent(b,{relatedTarget:c});a.dispatchEvent(d)},dispatchMouseEventAll:function(a,b,c,d){let e=this.hoverEls;if(c&&(e=e.filter((a)=>a!==this.state.get(this.GRAB_EVENT)&&a!==this.state.get(this.DRAG_EVENT)&&a!==this.state.get(this.STRETCH_EVENT)&&!this.gehDragged.has(a))),d)for(let c=0;c<e.length;c++)this.dispatchMouseEvent(e[c],a,b),this.dispatchMouseEvent(b,a,e[c]);else for(let c=0;c<e.length;c++)this.dispatchMouseEvent(e[c],a,b)},findTarget:function(a,b,c){var d,e=this.hoverEls;for(c&&(e=e.filter((a)=>a!==this.state.get(this.GRAB_EVENT)&&a!==this.state.get(this.DRAG_EVENT)&&a!==this.state.get(this.STRETCH_EVENT))),d=e.length-1;0<=d;d--)if(!this.emitCancelable(e[d],a,b))return e[d];return null},promoteHoveredEl:function(a){var b=this.hoverEls.indexOf(a);-1!==b&&(this.hoverEls.splice(b,1),this.hoverEls.push(a))}});

},{"./misc_components/locomotor-auto-config.js":2,"./misc_components/progressive-controls.js":3,"./primitives/a-locomotor.js":4,"./reaction_components/clickable.js":5,"./reaction_components/drag-droppable.js":6,"./reaction_components/grabbable.js":7,"./reaction_components/hoverable.js":8,"./reaction_components/stretchable.js":11,"./systems/super-hands-system.js":12}],2:[function(require,module,exports){
'use strict';AFRAME.registerComponent('locomotor-auto-config',{schema:{camera:{default:!0},stretch:{default:!0},move:{default:!0}},dependencies:['grabbable','stretchable'],init:function(){if(this.ready=!1,this.data.camera&&!document.querySelector('a-camera, [camera]')){let a=document.createElement('a-camera');this.el.appendChild(a)}this.fakeCollisions(),this.fakeCollisionsB=this.fakeCollisions.bind(this),this.el.addEventListener('controllerconnected',this.fakeCollisionsB)},update:function(){this.el.getAttribute('stretchable')&&!this.data.stretch?(this.stretchSet=this.el.getAttribute('stretchable'),this.el.removeAttribute('stretchable')):!this.el.getAttribute('stretchable')&&this.data.stretch&&this.el.setAttribute('stretchable',this.stretchSet),this.el.getAttribute('grabbable')&&!this.data.move?(this.grabSet=this.el.getAttribute('grabbable'),this.el.removeAttribute('grabbable')):!this.el.getAttribute('grabbable')&&this.data.move&&this.el.setAttribute('grabbable',this.grabSet)},remove:function(){this.el.removeState(this.colliderState),this.el.removeEventListener('controllerconnected',this.fakeCollisionsB)},announceReady:function(){this.ready||(this.ready=!0,this.el.emit('locomotor-ready',{}))},fakeCollisions:function(){this.el.getChildEntities().forEach((a)=>{let b=a.getAttribute('super-hands');if(b){let c={};c[b.colliderEventProperty]=this.el,a.emit(b.colliderEvent,c),this.colliderState=b.colliderState,this.el.addState(this.colliderState)}this.announceReady()})}});

},{}],3:[function(require,module,exports){
'use strict';AFRAME.registerComponent('progressive-controls',{schema:{maxLevel:{default:'touch',oneOf:['gaze','point','touch']},objects:{default:''},physicsBody:{default:'shape: sphere; sphereRadius: 0.02'},touchCollider:{default:'sphere-collider'}},init:function(){const a=AFRAME.components.link.schema.titleColor?'clearedEls':'el';this.levels=['gaze','point','touch'],this.currentLevel=0,this.superHandsRaycasterConfig={colliderEvent:'raycaster-intersection',colliderEventProperty:'els',colliderEndEvent:'raycaster-intersection-cleared',colliderEndEventProperty:a,colliderState:''},this.camera=this.el.querySelector('a-camera,[camera]')||this.el.appendChild(document.createElement('a-camera')),['left','right'].forEach((a)=>{this[a]=this.el.querySelector('.'+a+'-controller')||this.el.appendChild(document.createElement('a-entity')),this[a].classList&&this[a].classList.add(a+'-controller'),['daydream-controls','gearvr-controls','oculus-touch-controls','vive-controls','windows-motion-controls'].forEach((b)=>this[a].setAttribute(b,'hand: '+a)),this[a+'shOriginal']=this[a].getAttribute('super-hands')||{},'string'==typeof this[a+'shOriginal']&&(this[a+'shOriginal']=AFRAME.utils.styleParser.parse(this[a+'shOriginal']))}),this.el.addEventListener('controllerconnected',(a)=>this.detectLevel(a)),this.eventRepeaterB=this.eventRepeater.bind(this),this.addEventListeners()},update:function(){const a=this.currentLevel;this.currentLevel=-1,this.setLevel(a)},remove:function(){if(this.eventsRegistered){const a=this.el.sceneEl.canvas;a.removeEventListener('mousedown',this.eventRepeaterB),a.removeEventListener('mouseup',this.eventRepeaterB),a.removeEventListener('touchstart',this.eventRepeaterB),a.removeEventListener('touchend',this.eventRepeaterB)}},setLevel:function(a){const b=this.levels.indexOf(this.data.maxLevel),c=!!this.el.sceneEl.getAttribute('physics'),d=[this.right,this.left];if(a=a>b?b:a,a!==this.currentLevel){switch(0!==a&&this.caster&&(this.camera.removeChild(this.caster),this.caster=null,this.camera.removeAttribute('super-hands')),a){case 0:this.caster=this.camera.querySelector('[raycaster]'),this.caster||(this.caster=document.createElement('a-entity'),this.camera.appendChild(this.caster),this.caster.setAttribute('geometry','primitive: ring;radiusOuter: 0.008; radiusInner: 0.005; segmentsTheta: 32'),this.caster.setAttribute('material','color: #000; shader: flat;'),this.caster.setAttribute('position','0 0 -0.5')),this.caster.setAttribute('raycaster','objects: '+this.data.objects),this.camera.setAttribute('super-hands',this.superHandsRaycasterConfig),c&&this.camera.setAttribute('static-body',this.data.physicsBody);break;case 1:const b=this.controllerConfig[this.controllerName]||{},e=AFRAME.utils.extend({objects:this.data.objects,showLine:!0},b.raycaster||{});d.forEach((a)=>{a.setAttribute('super-hands',this.superHandsRaycasterConfig),a.setAttribute('raycaster',e),c&&a.setAttribute('static-body',this.data.physicsBody)});break;case 2:['right','left'].forEach((a)=>{this[a].setAttribute('super-hands',this[a+'shOriginal'],!0),this[a].setAttribute(this.data.touchCollider,'objects: '+this.data.objects),c&&this[a].setAttribute('static-body',this.data.physicsBody)});}this.currentLevel=a,this.el.emit('controller-progressed',{level:this.levels[this.currentLevel]})}},detectLevel:function(a){this.controllerName=a.detail.name,-1===['vive-controls','oculus-touch-controls','windows-motion-controls'].indexOf(a.detail.name)?-1===['gearvr-controls','daydream-controls'].indexOf(a.detail.name)?this.setLevel(this.levels.indexOf('gaze')):this.setLevel(this.levels.indexOf('point')):this.setLevel(this.levels.indexOf('touch'))},eventRepeater:function(a){a.type.startsWith('touch')&&(a.preventDefault(),'touchmove'===a.type)||this.camera.emit(a.type,a.detail)},addEventListeners:function(){return this.el.sceneEl.canvas?void(this.el.sceneEl.canvas.addEventListener('mousedown',this.eventRepeaterB),this.el.sceneEl.canvas.addEventListener('mouseup',this.eventRepeaterB),this.el.sceneEl.canvas.addEventListener('touchstart',this.eventRepeaterB),this.el.sceneEl.canvas.addEventListener('touchmove',this.eventRepeaterB),this.el.sceneEl.canvas.addEventListener('touchend',this.eventRepeaterB),this.eventsRegistered=!0):void this.el.sceneEl.addEventListener('loaded',this.addEventListeners.bind(this))},controllerConfig:{"gearvr-controls":{raycaster:{origin:{x:0,y:5e-4,z:0}}},"oculus-touch-controls":{raycaster:{origin:{x:1e-3,y:0,z:0.065},direction:{x:0,y:-0.8,z:-1}}}}});

},{}],4:[function(require,module,exports){
'use strict';var extendDeep=AFRAME.utils.extendDeep,meshMixin=AFRAME.primitives.getMeshMixin();AFRAME.registerPrimitive('a-locomotor',extendDeep({},meshMixin,{defaultComponents:{grabbable:{usePhysics:'never',invert:!0,suppressY:!0},stretchable:{invert:!0},"locomotor-auto-config":{}},mappings:{"fetch-camera":'locomotor-auto-config.camera',"allow-movement":'locomotor-auto-config.move',"horizontal-only":'grabbable.suppressY',"allow-scaling":'locomotor-auto-config.stretch'}}));

},{}],5:[function(require,module,exports){
'use strict';const buttonCore=require('./prototypes/buttons-proto.js');AFRAME.registerComponent('clickable',AFRAME.utils.extendDeep({},buttonCore,{schema:{onclick:{type:'string'}},init:function(){this.CLICKED_STATE='clicked',this.CLICK_EVENT='grab-start',this.UNCLICK_EVENT='grab-end',this.clickers=[],this.start=this.start.bind(this),this.end=this.end.bind(this),this.el.addEventListener(this.CLICK_EVENT,this.start),this.el.addEventListener(this.UNCLICK_EVENT,this.end)},remove:function(){this.el.removeEventListener(this.CLICK_EVENT,this.start),this.el.removeEventListener(this.UNCLICK_EVENT,this.end)},start:function(a){this.startButtonOk(a)&&(this.el.addState(this.CLICKED_STATE),-1===this.clickers.indexOf(a.detail.hand)&&(this.clickers.push(a.detail.hand),a.preventDefault&&a.preventDefault()))},end:function(a){const b=this.clickers.indexOf(a.detail.hand);this.endButtonOk(a)&&(-1!==b&&this.clickers.splice(b,1),1>this.clickers.length&&this.el.removeState(this.CLICKED_STATE),a.preventDefault&&a.preventDefault())}}));

},{"./prototypes/buttons-proto.js":9}],6:[function(require,module,exports){
'use strict';const inherit=AFRAME.utils.extendDeep,buttonCore=require('./prototypes/buttons-proto.js');AFRAME.registerComponent('drag-droppable',inherit({},buttonCore,{init:function(){this.HOVERED_STATE='dragover',this.DRAGGED_STATE='dragged',this.HOVER_EVENT='dragover-start',this.UNHOVER_EVENT='dragover-end',this.DRAG_EVENT='drag-start',this.UNDRAG_EVENT='drag-end',this.DRAGDROP_EVENT='drag-drop',this.hoverStart=this.hoverStart.bind(this),this.dragStart=this.dragStart.bind(this),this.hoverEnd=this.hoverEnd.bind(this),this.dragEnd=this.dragEnd.bind(this),this.dragDrop=this.dragDrop.bind(this),this.el.addEventListener(this.HOVER_EVENT,this.hoverStart),this.el.addEventListener(this.DRAG_EVENT,this.dragStart),this.el.addEventListener(this.UNHOVER_EVENT,this.hoverEnd),this.el.addEventListener(this.UNDRAG_EVENT,this.dragEnd),this.el.addEventListener(this.DRAGDROP_EVENT,this.dragDrop)},remove:function(){this.el.removeEventListener(this.HOVER_EVENT,this.hoverStart),this.el.removeEventListener(this.DRAG_EVENT,this.dragStart),this.el.removeEventListener(this.UNHOVER_EVENT,this.hoverEnd),this.el.removeEventListener(this.UNDRAG_EVENT,this.dragEnd),this.el.removeEventListener(this.DRAGDROP_EVENT,this.dragDrop)},hoverStart:function(a){this.el.addState(this.HOVERED_STATE),a.preventDefault&&a.preventDefault()},dragStart:function(a){this.startButtonOk(a)&&(this.el.addState(this.DRAGGED_STATE),a.preventDefault&&a.preventDefault())},hoverEnd:function(){this.el.removeState(this.HOVERED_STATE)},dragEnd:function(a){this.endButtonOk(a)&&(this.el.removeState(this.DRAGGED_STATE),a.preventDefault&&a.preventDefault())},dragDrop:function(a){!this.endButtonOk(a)||a.preventDefault&&a.preventDefault()}}));

},{"./prototypes/buttons-proto.js":9}],7:[function(require,module,exports){
'use strict';const inherit=AFRAME.utils.extendDeep,physicsCore=require('./prototypes/physics-grab-proto.js'),buttonsCore=require('./prototypes/buttons-proto.js');AFRAME.registerComponent('grabbable',inherit({},physicsCore,buttonsCore,{schema:{maxGrabbers:{type:'int',default:NaN},invert:{default:!1},suppressY:{default:!1}},init:function(){this.GRABBED_STATE='grabbed',this.GRAB_EVENT='grab-start',this.UNGRAB_EVENT='grab-end',this.grabbed=!1,this.grabbers=[],this.constraints=new Map,this.deltaPositionIsValid=!1,this.grabDistance=void 0,this.grabDirection={x:0,y:0,z:-1},this.grabOffset={x:0,y:0,z:0},this.destPosition={x:0,y:0,z:0},this.deltaPosition=new THREE.Vector3,this.targetPosition=new THREE.Vector3,this.physicsInit(),this.el.addEventListener(this.GRAB_EVENT,(a)=>this.start(a)),this.el.addEventListener(this.UNGRAB_EVENT,(a)=>this.end(a)),this.el.addEventListener('mouseout',(a)=>this.lostGrabber(a))},update:function(){this.physicsUpdate(),this.xFactor=this.data.invert?-1:1,this.zFactor=this.data.invert?-1:1,this.yFactor=(this.data.invert?-1:1)*!this.data.suppressY},tick:function(){var a;this.grabber&&(this.targetPosition.copy(this.grabDirection),this.targetPosition.applyQuaternion(this.grabber.object3D.getWorldQuaternion()).setLength(this.grabDistance).add(this.grabber.object3D.getWorldPosition()).add(this.grabOffset),this.deltaPositionIsValid?(this.deltaPosition.sub(this.targetPosition),a=this.el.getAttribute('position'),this.destPosition.x=a.x-this.deltaPosition.x*this.xFactor,this.destPosition.y=a.y-this.deltaPosition.y*this.yFactor,this.destPosition.z=a.z-this.deltaPosition.z*this.zFactor,this.el.setAttribute('position',this.destPosition)):this.deltaPositionIsValid=!0,this.deltaPosition.copy(this.targetPosition))},remove:function(){this.el.removeEventListener(this.GRAB_EVENT,this.start),this.el.removeEventListener(this.UNGRAB_EVENT,this.end),this.physicsRemove()},start:function(a){if(this.startButtonOk(a)){const b=!Number.isFinite(this.data.maxGrabbers)||this.grabbers.length<this.data.maxGrabbers;if(-1===this.grabbers.indexOf(a.detail.hand)&&b){if(!a.detail.hand.object3D)return void console.warn('grabbable entities must have an object3D');this.grabbers.push(a.detail.hand),this.physicsStart(a)||this.grabber||(this.grabber=a.detail.hand,this.resetGrabber()),a.preventDefault&&a.preventDefault(),this.grabbed=!0,this.el.addState(this.GRABBED_STATE)}}},end:function(a){const b=this.grabbers.indexOf(a.detail.hand);this.endButtonOk(a)&&(-1!==b&&(this.grabbers.splice(b,1),this.grabber=this.grabbers[0]),this.physicsEnd(a),!this.resetGrabber()&&(this.grabbed=!1,this.el.removeState(this.GRABBED_STATE)),a.preventDefault&&a.preventDefault())},resetGrabber:function(){let a;return!!this.grabber&&(a=this.grabber.getAttribute('raycaster'),this.deltaPositionIsValid=!1,this.grabDistance=this.el.object3D.getWorldPosition().distanceTo(this.grabber.object3D.getWorldPosition()),a&&(this.grabDirection=a.direction,this.grabOffset=a.origin),!0)},lostGrabber:function(a){let b=this.grabbers.indexOf(a.relatedTarget);-1===b||a.relatedTarget===this.grabber||this.physicsIsConstrained(a.relatedTarget)||this.grabbers.splice(b,1)}}));

},{"./prototypes/buttons-proto.js":9,"./prototypes/physics-grab-proto.js":10}],8:[function(require,module,exports){
'use strict';AFRAME.registerComponent('hoverable',{init:function(){this.HOVERED_STATE='hovered',this.HOVER_EVENT='hover-start',this.UNHOVER_EVENT='hover-end',this.hoverers=[],this.start=this.start.bind(this),this.end=this.end.bind(this),this.el.addEventListener(this.HOVER_EVENT,this.start),this.el.addEventListener(this.UNHOVER_EVENT,this.end)},remove:function(){this.el.removeEventListener(this.HOVER_EVENT,this.start),this.el.removeEventListener(this.UNHOVER_EVENT,this.end)},start:function(a){this.el.addState(this.HOVERED_STATE),-1===this.hoverers.indexOf(a.detail.hand)&&this.hoverers.push(a.detail.hand),a.preventDefault&&a.preventDefault()},end:function(a){var b=this.hoverers.indexOf(a.detail.hand);-1!==b&&this.hoverers.splice(b,1),1>this.hoverers.length&&this.el.removeState(this.HOVERED_STATE)}});

},{}],9:[function(require,module,exports){
'use strict';module.exports=function(){function a(a,b){return 0===b.length||-1!==b.indexOf(a.detail.buttonEvent.type)}return{schema:{startButtons:{default:[]},endButtons:{default:[]}},startButtonOk:function(b){return a(b,this.data.startButtons)},endButtonOk:function(b){return a(b,this.data.endButtons)}}}();

},{}],10:[function(require,module,exports){
'use strict';module.exports={schema:{usePhysics:{default:'ifavailable'}},physicsInit:function(){this.constraints=new Map},physicsUpdate:function(){'never'===this.data.usePhysics&&this.constraints.size&&this.physicsClear()},physicsRemove:function(){this.physicsClear()},physicsStart:function(a){if('never'!==this.data.usePhysics&&this.el.body&&a.detail.hand.body&&!this.constraints.has(a.detail.hand)){let b=new window.CANNON.LockConstraint(this.el.body,a.detail.hand.body);return this.el.body.world.addConstraint(b),this.constraints.set(a.detail.hand,b),!0}return!1},physicsEnd:function(a){let b=this.constraints.get(a.detail.hand);b&&(this.el.body.world.removeConstraint(b),this.constraints.delete(a.detail.hand))},physicsClear:function(){if(this.el.body)for(let a of this.constraints.values())this.el.body.world.removeConstraint(a);this.constraints.clear()},physicsIsConstrained:function(a){return this.constraints.has(a)},physicsIsGrabbing(){return 0<this.constraints.size}};

},{}],11:[function(require,module,exports){
'use strict';const inherit=AFRAME.utils.extendDeep,buttonCore=require('./prototypes/buttons-proto.js');AFRAME.registerComponent('stretchable',inherit({},buttonCore,{schema:{usePhysics:{default:'ifavailable'},invert:{default:!1}},init:function(){this.STRETCHED_STATE='stretched',this.STRETCH_EVENT='stretch-start',this.UNSTRETCH_EVENT='stretch-end',this.stretched=!1,this.stretchers=[],this.scale=new THREE.Vector3,this.handPos=new THREE.Vector3,this.otherHandPos=new THREE.Vector3,this.start=this.start.bind(this),this.end=this.end.bind(this),this.el.addEventListener(this.STRETCH_EVENT,this.start),this.el.addEventListener(this.UNSTRETCH_EVENT,this.end)},update:function(){},tick:function(){if(!this.stretched)return;this.scale.copy(this.el.getAttribute('scale')),this.handPos.copy(this.stretchers[0].getAttribute('position')),this.otherHandPos.copy(this.stretchers[1].getAttribute('position'));const a=this.handPos.distanceTo(this.otherHandPos);let b=1;if(null!==this.previousStretch&&0!==a&&(b=Math.pow(a/this.previousStretch,this.data.invert?-1:1)),this.previousStretch=a,this.scale.multiplyScalar(b),this.el.setAttribute('scale',this.scale),this.el.body&&'never'!==this.data.usePhysics){var c=this.el.body.shapes[0];c.halfExtents?(c.halfExtents.scale(b,c.halfExtents),c.updateConvexPolyhedronRepresentation()):c.radius?(c.radius*=b,c.updateBoundingSphereRadius()):!this.shapeWarned&&(console.warn('Unable to stretch physics body: unsupported shape'),this.shapeWarned=!0),this.el.body.updateBoundingRadius()}},remove:function(){this.el.removeEventListener(this.STRETCH_EVENT,this.start),this.el.removeEventListener(this.UNSTRETCH_EVENT,this.end)},start:function(a){this.stretched||this.stretchers.includes(a.detail.hand)||!this.startButtonOk(a)||(this.stretchers.push(a.detail.hand),2===this.stretchers.length&&(this.stretched=!0,this.previousStretch=null,this.el.addState(this.STRETCHED_STATE)),a.preventDefault&&a.preventDefault())},end:function(a){var b=this.stretchers.indexOf(a.detail.hand);this.endButtonOk(a)&&(-1!==b&&(this.stretchers.splice(b,1),this.stretched=!1,this.el.removeState(this.STRETCHED_STATE)),a.preventDefault&&a.preventDefault())}}));

},{"./prototypes/buttons-proto.js":9}],12:[function(require,module,exports){
'use strict';AFRAME.registerSystem('super-hands',{init:function(){this.superHands=[]},registerMe:function(a){1===this.superHands.length&&(this.superHands[0].otherSuperHand=a,a.otherSuperHand=this.superHands[0]),this.superHands.push(a)},unregisterMe:function(a){var b=this.superHands.indexOf(a);-1!==b&&this.superHands.splice(b,1),this.superHands.forEach((b)=>{b.otherSuperHand===a&&(b.otherSuperHand=null)})}});

},{}]},{},[1]);
